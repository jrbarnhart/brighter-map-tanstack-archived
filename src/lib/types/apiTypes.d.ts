/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_signIn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all region
         * @description This gets all region records
         */
        get: operations["RegionsController_findAll"];
        put?: never;
        /**
         * Create region
         * @description This creates a new region record
         */
        post: operations["RegionsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/regions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get region by id
         * @description This gets one region by its id
         */
        get: operations["RegionsController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete region
         * @description This deletes an region record by id
         */
        delete: operations["RegionsController_remove"];
        options?: never;
        head?: never;
        /**
         * Update region
         * @description This updates an region record by id
         */
        patch: operations["RegionsController_update"];
        trace?: never;
    };
    "/rooms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all room
         * @description This gets all room records
         */
        get: operations["RoomsController_findAll"];
        put?: never;
        /**
         * Create room
         * @description This creates a new room record
         */
        post: operations["RoomsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rooms/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get room by id
         * @description This gets one room by its id
         */
        get: operations["RoomsController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete room
         * @description This deletes an room record by id
         */
        delete: operations["RoomsController_remove"];
        options?: never;
        head?: never;
        /**
         * Update room
         * @description This updates an room record by id
         */
        patch: operations["RoomsController_update"];
        trace?: never;
    };
    "/skills/gathering/requirements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all gatheringSkillRequirement
         * @description This gets all gatheringSkillRequirement records
         */
        get: operations["GatheringSkillRequirementsController_findAll"];
        put?: never;
        /**
         * Create gatheringSkillRequirement
         * @description This creates a new gatheringSkillRequirement record
         */
        post: operations["GatheringSkillRequirementsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skills/gathering/requirements/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get gatheringSkillRequirement by id
         * @description This gets one gatheringSkillRequirement by its id
         */
        get: operations["GatheringSkillRequirementsController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete gatheringSkillRequirement
         * @description This deletes an gatheringSkillRequirement record by id
         */
        delete: operations["GatheringSkillRequirementsController_remove"];
        options?: never;
        head?: never;
        /**
         * Update gatheringSkillRequirement
         * @description This updates an gatheringSkillRequirement record by id
         */
        patch: operations["GatheringSkillRequirementsController_update"];
        trace?: never;
    };
    "/skills/gathering": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all gatheringSkill
         * @description This gets all gatheringSkill records
         */
        get: operations["GatheringSkillsController_findAll"];
        put?: never;
        /**
         * Create gatheringSkill
         * @description This creates a new gatheringSkill record
         */
        post: operations["GatheringSkillsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skills/gathering/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get gatheringSkill by id
         * @description This gets one gatheringSkill by its id
         */
        get: operations["GatheringSkillsController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete gatheringSkill
         * @description This deletes an gatheringSkill record by id
         */
        delete: operations["GatheringSkillsController_remove"];
        options?: never;
        head?: never;
        /**
         * Update gatheringSkill
         * @description This updates an gatheringSkill record by id
         */
        patch: operations["GatheringSkillsController_update"];
        trace?: never;
    };
    "/skills/crafting/requirements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all craftingSkillRequirement
         * @description This gets all craftingSkillRequirement records
         */
        get: operations["CraftingSkillRequirementsController_findAll"];
        put?: never;
        /**
         * Create craftingSkillRequirement
         * @description This creates a new craftingSkillRequirement record
         */
        post: operations["CraftingSkillRequirementsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skills/crafting/requirements/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get craftingSkillRequirement by id
         * @description This gets one craftingSkillRequirement by its id
         */
        get: operations["CraftingSkillRequirementsController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete craftingSkillRequirement
         * @description This deletes an craftingSkillRequirement record by id
         */
        delete: operations["CraftingSkillRequirementsController_remove"];
        options?: never;
        head?: never;
        /**
         * Update craftingSkillRequirement
         * @description This updates an craftingSkillRequirement record by id
         */
        patch: operations["CraftingSkillRequirementsController_update"];
        trace?: never;
    };
    "/skills/crafting/recipes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all craftingRecipe
         * @description This gets all craftingRecipe records
         */
        get: operations["CraftingRecipesController_findAll"];
        put?: never;
        /**
         * Create craftingRecipe
         * @description This creates a new craftingRecipe record
         */
        post: operations["CraftingRecipesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skills/crafting/recipes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get craftingRecipe by id
         * @description This gets one craftingRecipe by its id
         */
        get: operations["CraftingRecipesController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete craftingRecipe
         * @description This deletes an craftingRecipe record by id
         */
        delete: operations["CraftingRecipesController_remove"];
        options?: never;
        head?: never;
        /**
         * Update craftingRecipe
         * @description This updates an craftingRecipe record by id
         */
        patch: operations["CraftingRecipesController_update"];
        trace?: never;
    };
    "/skills/crafting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all craftingSkill
         * @description This gets all craftingSkill records
         */
        get: operations["CraftingSkillsController_findAll"];
        put?: never;
        /**
         * Create craftingSkill
         * @description This creates a new craftingSkill record
         */
        post: operations["CraftingSkillsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skills/crafting/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get craftingSkill by id
         * @description This gets one craftingSkill by its id
         */
        get: operations["CraftingSkillsController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete craftingSkill
         * @description This deletes an craftingSkill record by id
         */
        delete: operations["CraftingSkillsController_remove"];
        options?: never;
        head?: never;
        /**
         * Update craftingSkill
         * @description This updates an craftingSkill record by id
         */
        patch: operations["CraftingSkillsController_update"];
        trace?: never;
    };
    "/skills/combat/requirements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all combatSkillRequirement
         * @description This gets all combatSkillRequirement records
         */
        get: operations["CombatSkillRequirementsController_findAll"];
        put?: never;
        /**
         * Create combatSkillRequirement
         * @description This creates a new combatSkillRequirement record
         */
        post: operations["CombatSkillRequirementsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skills/combat/requirements/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get combatSkillRequirement by id
         * @description This gets one combatSkillRequirement by its id
         */
        get: operations["CombatSkillRequirementsController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete combatSkillRequirement
         * @description This deletes an combatSkillRequirement record by id
         */
        delete: operations["CombatSkillRequirementsController_remove"];
        options?: never;
        head?: never;
        /**
         * Update combatSkillRequirement
         * @description This updates an combatSkillRequirement record by id
         */
        patch: operations["CombatSkillRequirementsController_update"];
        trace?: never;
    };
    "/skills/combat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all combatSkill
         * @description This gets all combatSkill records
         */
        get: operations["CombatSkillsController_findAll"];
        put?: never;
        /**
         * Create combatSkill
         * @description This creates a new combatSkill record
         */
        post: operations["CombatSkillsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skills/combat/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get combatSkill by id
         * @description This gets one combatSkill by its id
         */
        get: operations["CombatSkillsController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete combatSkill
         * @description This deletes an combatSkill record by id
         */
        delete: operations["CombatSkillsController_remove"];
        options?: never;
        head?: never;
        /**
         * Update combatSkill
         * @description This updates an combatSkill record by id
         */
        patch: operations["CombatSkillsController_update"];
        trace?: never;
    };
    "/skills": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Invalid access
         * @description This warns users and shows an example valid skills query
         */
        get: operations["SkillsController_find"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Invalid access
         * @description This warns users and shows an example valid items query
         */
        get: operations["ItemsController_find"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/resources/variants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all resourceVariant
         * @description This gets all resourceVariant records
         */
        get: operations["ResourceVariantsController_findAll"];
        put?: never;
        /**
         * Create resourceVariant
         * @description This creates a new resourceVariant record
         */
        post: operations["ResourceVariantsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/resources/variants/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get resourceVariant by id
         * @description This gets one resourceVariant by its id
         */
        get: operations["ResourceVariantsController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete resourceVariant
         * @description This deletes an resourceVariant record by id
         */
        delete: operations["ResourceVariantsController_remove"];
        options?: never;
        head?: never;
        /**
         * Update resourceVariant
         * @description This updates an resourceVariant record by id
         */
        patch: operations["ResourceVariantsController_update"];
        trace?: never;
    };
    "/items/resources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all resource
         * @description This gets all resource records
         */
        get: operations["ResourcesController_findAll"];
        put?: never;
        /**
         * Create resource
         * @description This creates a new resource record
         */
        post: operations["ResourcesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/resources/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get resource by id
         * @description This gets one resource by its id
         */
        get: operations["ResourcesController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete resource
         * @description This deletes an resource record by id
         */
        delete: operations["ResourcesController_remove"];
        options?: never;
        head?: never;
        /**
         * Update resource
         * @description This updates an resource record by id
         */
        patch: operations["ResourcesController_update"];
        trace?: never;
    };
    "/items/consumables/variants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all consumableVariant
         * @description This gets all consumableVariant records
         */
        get: operations["ConsumableVariantsController_findAll"];
        put?: never;
        /**
         * Create consumableVariant
         * @description This creates a new consumableVariant record
         */
        post: operations["ConsumableVariantsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/consumables/variants/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get consumableVariant by id
         * @description This gets one consumableVariant by its id
         */
        get: operations["ConsumableVariantsController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete consumableVariant
         * @description This deletes an consumableVariant record by id
         */
        delete: operations["ConsumableVariantsController_remove"];
        options?: never;
        head?: never;
        /**
         * Update consumableVariant
         * @description This updates an consumableVariant record by id
         */
        patch: operations["ConsumableVariantsController_update"];
        trace?: never;
    };
    "/items/consumables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all consumable
         * @description This gets all consumable records
         */
        get: operations["ConsumablesController_findAll"];
        put?: never;
        /**
         * Create consumable
         * @description This creates a new consumable record
         */
        post: operations["ConsumablesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/consumables/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get consumable by id
         * @description This gets one consumable by its id
         */
        get: operations["ConsumablesController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete consumable
         * @description This deletes an consumable record by id
         */
        delete: operations["ConsumablesController_remove"];
        options?: never;
        head?: never;
        /**
         * Update consumable
         * @description This updates an consumable record by id
         */
        patch: operations["ConsumablesController_update"];
        trace?: never;
    };
    "/items/weapons/variants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all weaponVariant
         * @description This gets all weaponVariant records
         */
        get: operations["WeaponVariantsController_findAll"];
        put?: never;
        /**
         * Create weaponVariant
         * @description This creates a new weaponVariant record
         */
        post: operations["WeaponVariantsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/weapons/variants/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get weaponVariant by id
         * @description This gets one weaponVariant by its id
         */
        get: operations["WeaponVariantsController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete weaponVariant
         * @description This deletes an weaponVariant record by id
         */
        delete: operations["WeaponVariantsController_remove"];
        options?: never;
        head?: never;
        /**
         * Update weaponVariant
         * @description This updates an weaponVariant record by id
         */
        patch: operations["WeaponVariantsController_update"];
        trace?: never;
    };
    "/items/weapons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all weapon
         * @description This gets all weapon records
         */
        get: operations["WeaponsController_findAll"];
        put?: never;
        /**
         * Create weapon
         * @description This creates a new weapon record
         */
        post: operations["WeaponsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/weapons/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get weapon by id
         * @description This gets one weapon by its id
         */
        get: operations["WeaponsController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete weapon
         * @description This deletes an weapon record by id
         */
        delete: operations["WeaponsController_remove"];
        options?: never;
        head?: never;
        /**
         * Update weapon
         * @description This updates an weapon record by id
         */
        patch: operations["WeaponsController_update"];
        trace?: never;
    };
    "/items/armors/variants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all armorVariant
         * @description This gets all armorVariant records
         */
        get: operations["ArmorVariantsController_findAll"];
        put?: never;
        /**
         * Create armorVariant
         * @description This creates a new armorVariant record
         */
        post: operations["ArmorVariantsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/armors/variants/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get armorVariant by id
         * @description This gets one armorVariant by its id
         */
        get: operations["ArmorVariantsController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete armorVariant
         * @description This deletes an armorVariant record by id
         */
        delete: operations["ArmorVariantsController_remove"];
        options?: never;
        head?: never;
        /**
         * Update armorVariant
         * @description This updates an armorVariant record by id
         */
        patch: operations["ArmorVariantsController_update"];
        trace?: never;
    };
    "/items/armors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all armor
         * @description This gets all armor records
         */
        get: operations["ArmorsController_findAll"];
        put?: never;
        /**
         * Create armor
         * @description This creates a new armor record
         */
        post: operations["ArmorsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/armors/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get armor by id
         * @description This gets one armor by its id
         */
        get: operations["ArmorsController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete armor
         * @description This deletes an armor record by id
         */
        delete: operations["ArmorsController_remove"];
        options?: never;
        head?: never;
        /**
         * Update armor
         * @description This updates an armor record by id
         */
        patch: operations["ArmorsController_update"];
        trace?: never;
    };
    "/items/misc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all miscItem
         * @description This gets all miscItem records
         */
        get: operations["MiscItemsController_findAll"];
        put?: never;
        /**
         * Create miscItem
         * @description This creates a new miscItem record
         */
        post: operations["MiscItemsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/misc/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get miscItem by id
         * @description This gets one miscItem by its id
         */
        get: operations["MiscItemsController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete miscItem
         * @description This deletes an miscItem record by id
         */
        delete: operations["MiscItemsController_remove"];
        options?: never;
        head?: never;
        /**
         * Update miscItem
         * @description This updates an miscItem record by id
         */
        patch: operations["MiscItemsController_update"];
        trace?: never;
    };
    "/monsters/drop-tables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all dropTable
         * @description This gets all dropTable records
         */
        get: operations["DropTablesController_findAll"];
        put?: never;
        /**
         * Create dropTable
         * @description This creates a new dropTable record
         */
        post: operations["DropTablesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/monsters/drop-tables/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get dropTable by id
         * @description This gets one dropTable by its id
         */
        get: operations["DropTablesController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete dropTable
         * @description This deletes an dropTable record by id
         */
        delete: operations["DropTablesController_remove"];
        options?: never;
        head?: never;
        /**
         * Update dropTable
         * @description This updates an dropTable record by id
         */
        patch: operations["DropTablesController_update"];
        trace?: never;
    };
    "/monsters/variants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all monsterVariant
         * @description This gets all monsterVariant records
         */
        get: operations["MonsterVariantsController_findAll"];
        put?: never;
        /**
         * Create monsterVariant
         * @description This creates a new monsterVariant record
         */
        post: operations["MonsterVariantsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/monsters/variants/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get monsterVariant by id
         * @description This gets one monsterVariant by its id
         */
        get: operations["MonsterVariantsController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete monsterVariant
         * @description This deletes an monsterVariant record by id
         */
        delete: operations["MonsterVariantsController_remove"];
        options?: never;
        head?: never;
        /**
         * Update monsterVariant
         * @description This updates an monsterVariant record by id
         */
        patch: operations["MonsterVariantsController_update"];
        trace?: never;
    };
    "/monsters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all monster
         * @description This gets all monster records
         */
        get: operations["MonstersController_findAll"];
        put?: never;
        /**
         * Create monster
         * @description This creates a new monster record
         */
        post: operations["MonstersController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/monsters/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get monster by id
         * @description This gets one monster by its id
         */
        get: operations["MonstersController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete monster
         * @description This deletes an monster record by id
         */
        delete: operations["MonstersController_remove"];
        options?: never;
        head?: never;
        /**
         * Update monster
         * @description This updates an monster record by id
         */
        patch: operations["MonstersController_update"];
        trace?: never;
    };
    "/npcs/vendors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all vendor
         * @description This gets all vendor records
         */
        get: operations["VendorsController_findAll"];
        put?: never;
        /**
         * Create vendor
         * @description This creates a new vendor record
         */
        post: operations["VendorsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/npcs/vendors/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get vendor by id
         * @description This gets one vendor by its id
         */
        get: operations["VendorsController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete vendor
         * @description This deletes an vendor record by id
         */
        delete: operations["VendorsController_remove"];
        options?: never;
        head?: never;
        /**
         * Update vendor
         * @description This updates an vendor record by id
         */
        patch: operations["VendorsController_update"];
        trace?: never;
    };
    "/npcs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all npc
         * @description This gets all npc records
         */
        get: operations["NpcsController_findAll"];
        put?: never;
        /**
         * Create npc
         * @description This creates a new npc record
         */
        post: operations["NpcsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/npcs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get npc by id
         * @description This gets one npc by its id
         */
        get: operations["NpcsController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete npc
         * @description This deletes an npc record by id
         */
        delete: operations["NpcsController_remove"];
        options?: never;
        head?: never;
        /**
         * Update npc
         * @description This updates an npc record by id
         */
        patch: operations["NpcsController_update"];
        trace?: never;
    };
    "/quests/steps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all questStep
         * @description This gets all questStep records
         */
        get: operations["QuestStepsController_findAll"];
        put?: never;
        /**
         * Create questStep
         * @description This creates a new questStep record
         */
        post: operations["QuestStepsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/quests/steps/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get questStep by id
         * @description This gets one questStep by its id
         */
        get: operations["QuestStepsController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete questStep
         * @description This deletes an questStep record by id
         */
        delete: operations["QuestStepsController_remove"];
        options?: never;
        head?: never;
        /**
         * Update questStep
         * @description This updates an questStep record by id
         */
        patch: operations["QuestStepsController_update"];
        trace?: never;
    };
    "/quests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all quest
         * @description This gets all quest records
         */
        get: operations["QuestsController_findAll"];
        put?: never;
        /**
         * Create quest
         * @description This creates a new quest record
         */
        post: operations["QuestsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/quests/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get quest by id
         * @description This gets one quest by its id
         */
        get: operations["QuestsController_findOne"];
        put?: never;
        post?: never;
        /**
         * Delete quest
         * @description This deletes an quest record by id
         */
        delete: operations["QuestsController_remove"];
        options?: never;
        head?: never;
        /**
         * Update quest
         * @description This updates an quest record by id
         */
        patch: operations["QuestsController_update"];
        trace?: never;
    };
    "/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get API stats
         * @description This gets counts and other info about all database records
         */
        get: operations["StatsController_find"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["HealthController_check"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["LogsController_getCombinedLogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        SignInDto: {
            username: string;
            password: string;
        };
        JwtEntity: {
            access_token: string;
        };
        CreateRegionDto: {
            name: string;
        };
        RegionBaseEntity: {
            id: number;
            name: string;
        };
        RoomBaseEntity: {
            /** @description The array of types of bank in this room */
            banks: ("BONES" | "BUILDING" | "CAPES" | "EXPLOSIVES" | "BAIT" | "HIDES" | "INGREDIENTS" | "LEATHERS" | "LUMBER" | "MONUMENT" | "ORE" | "REAGENTS" | "POTIONS" | "QUARTERMASTER" | "STONE" | "TIMBER")[];
            id: number;
            name: string;
            regionId: number;
            portal: boolean;
            obelisk: boolean;
            rift: boolean;
        };
        CombatSkillBaseEntity: {
            id: number;
            name: string;
            regionId: number;
        };
        GatheringSkillBaseEntity: {
            id: number;
            name: string;
            regionId: number;
        };
        CraftingSkillBaseEntity: {
            id: number;
            name: string;
            regionId: number;
        };
        MonsterBaseEntity: {
            /**
             * @description The damage element this weapon has
             * @enum {string}
             */
            attackElement: "ARBORAE" | "CRYONAE" | "INFERNAE" | "NECROMAE" | "TEMPESTAE" | "IMPACT" | "NONE";
            /**
             * @description The damage element this weapon has
             * @enum {string}
             */
            immuneElement: "ARBORAE" | "CRYONAE" | "INFERNAE" | "NECROMAE" | "TEMPESTAE" | "IMPACT" | "NONE";
            /**
             * @description The damage element this weapon has
             * @enum {string}
             */
            vulnerableElement: "ARBORAE" | "CRYONAE" | "INFERNAE" | "NECROMAE" | "TEMPESTAE" | "IMPACT" | "NONE";
            id: number;
            name: string;
            skillId: number;
            regionId: number;
            passive: boolean;
        };
        QuestBaseEntity: {
            id: number;
            name: string;
            regionId: number;
        };
        RegionEntity: {
            id: number;
            name: string;
            rooms: components["schemas"]["RoomBaseEntity"][];
            combatSkills: components["schemas"]["CombatSkillBaseEntity"][];
            gatheringSkills: components["schemas"]["GatheringSkillBaseEntity"][];
            craftingSkills: components["schemas"]["CraftingSkillBaseEntity"][];
            monsters: components["schemas"]["MonsterBaseEntity"][];
            quests: components["schemas"]["QuestBaseEntity"][];
        };
        UpdateRegionDto: {
            name?: string;
        };
        CreateRoomDto: {
            /** @description The array of types of bank in this room */
            banks?: ("BONES" | "BUILDING" | "CAPES" | "EXPLOSIVES" | "BAIT" | "HIDES" | "INGREDIENTS" | "LEATHERS" | "LUMBER" | "MONUMENT" | "ORE" | "REAGENTS" | "POTIONS" | "QUARTERMASTER" | "STONE" | "TIMBER")[];
            name: string;
            regionId: number;
            portal: boolean;
            obelisk: boolean;
            rift: boolean;
            craftingSkillIds?: number[];
            monsterIds?: number[];
            npcIds?: number[];
            resourceIds?: number[];
            questStepIds?: number[];
        };
        NpcBaseEntity: {
            id: number;
            name: string;
        };
        ResourceBaseEntity: {
            id: number;
            name: string;
            skillId: number;
            passive: boolean;
        };
        QuestStepBaseEntity: {
            id: number;
            index: number;
            description: string;
            questId: number;
            roomId: number | null;
            npcId: number | null;
        };
        RoomEntity: {
            /** @description The array of types of bank in this room */
            banks: ("BONES" | "BUILDING" | "CAPES" | "EXPLOSIVES" | "BAIT" | "HIDES" | "INGREDIENTS" | "LEATHERS" | "LUMBER" | "MONUMENT" | "ORE" | "REAGENTS" | "POTIONS" | "QUARTERMASTER" | "STONE" | "TIMBER")[];
            id: number;
            name: string;
            region: components["schemas"]["RegionBaseEntity"];
            regionId: number;
            portal: boolean;
            obelisk: boolean;
            rift: boolean;
            craftingSkills: components["schemas"]["CraftingSkillBaseEntity"][];
            monsters: components["schemas"]["MonsterBaseEntity"][];
            npcs: components["schemas"]["NpcBaseEntity"][];
            resources: components["schemas"]["ResourceBaseEntity"][];
            questSteps: components["schemas"]["QuestStepBaseEntity"][];
        };
        UpdateRoomDto: {
            /** @description The array of types of bank in this room */
            banks?: ("BONES" | "BUILDING" | "CAPES" | "EXPLOSIVES" | "BAIT" | "HIDES" | "INGREDIENTS" | "LEATHERS" | "LUMBER" | "MONUMENT" | "ORE" | "REAGENTS" | "POTIONS" | "QUARTERMASTER" | "STONE" | "TIMBER")[];
            name?: string;
            regionId?: number;
            portal?: boolean;
            obelisk?: boolean;
            rift?: boolean;
            craftingSkillIds?: number[];
            monsterIds?: number[];
            npcIds?: number[];
            resourceIds?: number[];
            questStepIds?: number[];
            removeCraftingSkillIds?: number[];
            removeMonsterIds?: number[];
            removeNpcIds?: number[];
            removeResourceIds?: number[];
            removeQuestStepIds?: number[];
        };
        CreateGatheringSkillRequirementDto: {
            skillId: number;
            unlockLevel: number;
            description?: string;
            resourceVariantId?: number | null;
        };
        GatheringSkillRequirementBaseEntity: {
            id: number;
            description?: string;
            skillId: number;
            resourceVariantId: number | null;
            unlockLevel: number;
        };
        GatheringSkillEntity: {
            id: number;
            name: string;
            region: components["schemas"]["RegionBaseEntity"];
            regionId: number;
            requirements: components["schemas"]["GatheringSkillRequirementBaseEntity"][];
            resources: components["schemas"]["ResourceBaseEntity"][];
        };
        ResourceVariantBaseWithResourceEntity: {
            id: number;
            name: string;
            resourceId: number;
            resource: components["schemas"]["ResourceBaseEntity"];
        };
        GatheringSkillRequirementEntity: {
            id: number;
            description?: string;
            skill: components["schemas"]["GatheringSkillEntity"];
            skillId: number;
            resourceVariant?: components["schemas"]["ResourceVariantBaseWithResourceEntity"];
            resourceVariantId: number | null;
            unlockLevel: number;
        };
        UpdateGatheringSkillRequirementDto: {
            skillId?: number;
            unlockLevel?: number;
            description?: string;
            resourceVariantId?: number | null;
        };
        CreateGatheringSkillDto: {
            name: string;
            regionId: number;
        };
        UpdateGatheringSkillDto: {
            name?: string;
            regionId?: number;
        };
        CreateCraftingSkillRequirementDto: {
            skillId: number;
            unlockLevel: number;
            description?: string;
            recipeId?: number | null;
        };
        CraftingSkillRequirementBaseEntity: {
            id: number;
            description?: string;
            skillId: number;
            recipeId: number | null;
            unlockLevel: number;
        };
        CraftingRecipeBaseEntity: {
            id: number;
            name: string;
            outputConsumableVariantId: number | null;
            outputWeaponVariantId: number | null;
            outputArmorVariantId: number | null;
        };
        CraftingSkillRequirementEntity: {
            id: number;
            description?: string;
            skill: components["schemas"]["CraftingSkillBaseEntity"];
            skillId: number;
            recipe?: components["schemas"]["CraftingRecipeBaseEntity"];
            recipeId: number | null;
            unlockLevel: number;
        };
        UpdateCraftingSkillRequirementDto: {
            skillId?: number;
            unlockLevel?: number;
            description?: string;
            recipeId?: number | null;
        };
        CreateCraftingRecipeDto: {
            name: string;
            inputResourceVariantIds?: number[];
            inputItemIds?: number[];
            outputConsumableVariantId?: number | null;
            outputWeaponVariantId?: number | null;
            outputArmorVariantId?: number | null;
        };
        CraftingSkillRequirementBaseWithSkillEntity: {
            id: number;
            description?: string;
            skillId: number;
            skill: components["schemas"]["CraftingSkillBaseEntity"];
            recipeId: number | null;
            unlockLevel: number;
        };
        MiscItemBaseEntity: {
            id: number;
            name: string;
        };
        ConsumableBaseEntity: {
            id: number;
            name: string;
            skillId: number | null;
        };
        ConsumableVariantBaseWithConsumableEntity: {
            id: number;
            name: string;
            consumableId: number;
            consumable: components["schemas"]["ConsumableBaseEntity"];
        };
        WeaponBaseEntity: {
            /**
             * @description The faction/player class this belongs to
             * @enum {string}
             */
            faction: "CRYOKNIGHT" | "GUARDIAN" | "HAMMERMAGE" | "NONE";
            /**
             * @description The damage element this weapon has
             * @enum {string}
             */
            element: "ARBORAE" | "CRYONAE" | "INFERNAE" | "NECROMAE" | "TEMPESTAE" | "IMPACT" | "NONE";
            id: number;
            name: string;
            isRanged: boolean;
            isTwoHanded: boolean;
        };
        WeaponVariantBaseWithWeaponEntity: {
            id: number;
            name: string;
            weaponId: number;
            weapon: components["schemas"]["WeaponBaseEntity"];
        };
        ArmorBaseEntity: {
            /**
             * @description The faction/player class this belongs to
             * @enum {string}
             */
            faction: "CRYOKNIGHT" | "GUARDIAN" | "HAMMERMAGE" | "NONE";
            /**
             * @description The gear slot that this armor occupies
             * @enum {string}
             */
            slot: "HEAD" | "NECK" | "TORSO" | "BACK" | "HANDS" | "SHIELD" | "LEGS" | "FEET";
            id: number;
            name: string;
        };
        ArmorVariantBaseWithArmorEntity: {
            id: number;
            name: string;
            armorId: number;
            armor: components["schemas"]["ArmorBaseEntity"];
        };
        CraftingRecipeEntity: {
            id: number;
            name: string;
            requirement?: components["schemas"]["CraftingSkillRequirementBaseWithSkillEntity"];
            inputResourceVariants: components["schemas"]["ResourceVariantBaseWithResourceEntity"][];
            inputItems: components["schemas"]["MiscItemBaseEntity"][];
            outputConsumableVariant?: components["schemas"]["ConsumableVariantBaseWithConsumableEntity"];
            outputConsumableVariantId: number | null;
            outputWeaponVariant?: components["schemas"]["WeaponVariantBaseWithWeaponEntity"];
            outputWeaponVariantId: number | null;
            outputArmorVariant?: components["schemas"]["ArmorVariantBaseWithArmorEntity"];
            outputArmorVariantId: number | null;
        };
        UpdateCraftingRecipeDto: {
            name?: string;
            inputResourceVariantIds?: number[];
            removeInputResourceVariantIds?: number[];
            inputItemIds?: number[];
            removeInputItemIds?: number[];
            outputConsumableVariantId?: number | null;
            outputWeaponVariantId?: number | null;
            outputArmorVariantId?: number | null;
        };
        CreateCraftingSkillDto: {
            name: string;
            regionId: number;
        };
        CraftingSkillEntity: {
            id: number;
            name: string;
            region: components["schemas"]["RegionBaseEntity"];
            regionId: number;
            requirements: components["schemas"]["CraftingSkillRequirementBaseEntity"][];
            rooms: components["schemas"]["RoomBaseEntity"][];
            consumables: components["schemas"]["ConsumableBaseEntity"][];
        };
        UpdateCraftingSkillDto: {
            name?: string;
            regionId?: number;
        };
        CreateCombatSkillRequirementDto: {
            skillId: number;
            unlockLevel: number;
            description?: string;
            monsterVariantId?: number | null;
        };
        CombatSkillRequirementBaseEntity: {
            id: number;
            description?: string;
            skillId: number;
            monsterVariantId?: number | null;
            unlockLevel: number;
        };
        MonsterVariantBaseWithMonsterEntity: {
            id: number;
            name: string;
            monsterId: number;
            monster: components["schemas"]["MonsterBaseEntity"];
        };
        CombatSkillRequirementEntity: {
            id: number;
            description?: string;
            skill: components["schemas"]["CombatSkillBaseEntity"];
            skillId: number;
            monsterVariant?: components["schemas"]["MonsterVariantBaseWithMonsterEntity"];
            monsterVariantId?: number | null;
            unlockLevel: number;
        };
        UpdateCombatSkillRequirementDto: {
            skillId?: number;
            unlockLevel?: number;
            description?: string;
            monsterVariantId?: number | null;
        };
        CreateCombatSkillDto: {
            name: string;
            regionId: number;
        };
        CombatSkillEntity: {
            id: number;
            name: string;
            region: components["schemas"]["RegionBaseEntity"];
            regionId: number;
            requirements: components["schemas"]["CombatSkillRequirementBaseEntity"][];
            monsters: components["schemas"]["MonsterBaseEntity"][];
        };
        UpdateCombatSkillDto: {
            name?: string;
            regionId?: number;
        };
        CreateResourceVariantDto: {
            name: string;
            resourceId: number;
        };
        ResourceVariantBaseEntity: {
            id: number;
            name: string;
            resourceId: number;
        };
        ResourceBaseWithSkillEntity: {
            id: number;
            name: string;
            skillId: number;
            skill: components["schemas"]["GatheringSkillBaseEntity"];
            passive: boolean;
        };
        VendorBaseEntity: {
            id: number;
            name?: string | null;
            npcId: number;
        };
        DropTableBaseEntity: {
            id: number;
            monsterVariantId: number;
            currency: number | null;
        };
        ResourceVariantEntity: {
            id: number;
            name: string;
            resource: components["schemas"]["ResourceBaseWithSkillEntity"];
            resourceId: number;
            requirement?: components["schemas"]["GatheringSkillRequirementBaseEntity"];
            inRecipes: components["schemas"]["CraftingRecipeBaseEntity"][];
            vendors: components["schemas"]["VendorBaseEntity"][];
            dropTables: components["schemas"]["DropTableBaseEntity"][];
        };
        UpdateResourceVariantDto: {
            name?: string;
            resourceId?: number;
        };
        CreateResourceDto: {
            name: string;
            skillId: number;
            passive: boolean;
        };
        ResourceEntity: {
            id: number;
            name: string;
            skill: components["schemas"]["GatheringSkillBaseEntity"];
            skillId: number;
            rooms: components["schemas"]["RoomBaseEntity"][];
            passive: boolean;
            variants: components["schemas"]["ResourceVariantBaseEntity"][];
        };
        UpdateResourceDto: {
            name?: string;
            skillId?: number;
            passive?: boolean;
        };
        CreateConsumableVariantDto: {
            name: string;
            consumableId: number;
        };
        ConsumableVariantBaseEntity: {
            id: number;
            name: string;
            consumableId: number;
        };
        ConsumableBaseWithSkillEntity: {
            id: number;
            name: string;
            skillId: number | null;
            skill?: components["schemas"]["CraftingSkillBaseEntity"];
        };
        ConsumableVariantEntity: {
            id: number;
            name: string;
            consumable: components["schemas"]["ConsumableBaseWithSkillEntity"];
            consumableId: number;
            recipe?: components["schemas"]["CraftingRecipeBaseEntity"];
            vendors: components["schemas"]["VendorBaseEntity"][];
            dropTables: components["schemas"]["DropTableBaseEntity"][];
        };
        UpdateConsumableVariantDto: {
            name?: string;
            consumableId?: number;
        };
        CreateConsumableDto: {
            name: string;
            skillId?: number | null;
        };
        ConsumableEntity: {
            id: number;
            name: string;
            skill?: components["schemas"]["CraftingSkillBaseEntity"];
            skillId: number | null;
            variants: components["schemas"]["ConsumableVariantBaseEntity"][];
        };
        UpdateConsumableDto: {
            name?: string;
            skillId?: number | null;
        };
        CreateWeaponVariantDto: {
            name: string;
            weaponId: number;
        };
        WeaponVariantBaseEntity: {
            id: number;
            name: string;
            weaponId: number;
        };
        WeaponVariantEntity: {
            id: number;
            name: string;
            weapon: components["schemas"]["WeaponBaseEntity"];
            weaponId: number;
            recipe?: components["schemas"]["CraftingRecipeBaseEntity"];
            vendors: components["schemas"]["VendorBaseEntity"][];
            dropTables: components["schemas"]["DropTableBaseEntity"][];
        };
        UpdateWeaponVariantDto: {
            name?: string;
            weaponId?: number;
        };
        CreateWeaponDto: {
            /**
             * @description The faction/player class this belongs to
             * @enum {string}
             */
            faction: "CRYOKNIGHT" | "GUARDIAN" | "HAMMERMAGE" | "NONE";
            /**
             * @description The damage element this weapon has
             * @enum {string}
             */
            element: "ARBORAE" | "CRYONAE" | "INFERNAE" | "NECROMAE" | "TEMPESTAE" | "IMPACT" | "NONE";
            name: string;
            isRanged: boolean;
            isTwoHanded: boolean;
        };
        WeaponEntity: {
            /**
             * @description The faction/player class this belongs to
             * @enum {string}
             */
            faction: "CRYOKNIGHT" | "GUARDIAN" | "HAMMERMAGE" | "NONE";
            /**
             * @description The damage element this weapon has
             * @enum {string}
             */
            element: "ARBORAE" | "CRYONAE" | "INFERNAE" | "NECROMAE" | "TEMPESTAE" | "IMPACT" | "NONE";
            id: number;
            name: string;
            isRanged: boolean;
            isTwoHanded: boolean;
            variants: components["schemas"]["WeaponVariantBaseEntity"][];
        };
        UpdateWeaponDto: {
            /**
             * @description The faction/player class this belongs to
             * @enum {string}
             */
            faction?: "CRYOKNIGHT" | "GUARDIAN" | "HAMMERMAGE" | "NONE";
            /**
             * @description The damage element this weapon has
             * @enum {string}
             */
            element?: "ARBORAE" | "CRYONAE" | "INFERNAE" | "NECROMAE" | "TEMPESTAE" | "IMPACT" | "NONE";
            name?: string;
            isRanged?: boolean;
            isTwoHanded?: boolean;
        };
        CreateArmorVariantDto: {
            name: string;
            armorId: number;
        };
        ArmorVariantBaseEntity: {
            id: number;
            name: string;
            armorId: number;
        };
        ArmorVariantEntity: {
            id: number;
            name: string;
            armor: components["schemas"]["ArmorBaseEntity"];
            armorId: number;
            recipe?: components["schemas"]["CraftingRecipeBaseEntity"];
            vendors: components["schemas"]["VendorBaseEntity"][];
            dropTables: components["schemas"]["DropTableBaseEntity"][];
        };
        UpdateArmorVariantDto: {
            name?: string;
            armorId?: number;
        };
        CreateArmorDto: {
            /**
             * @description The faction/player class this belongs to
             * @enum {string}
             */
            faction: "CRYOKNIGHT" | "GUARDIAN" | "HAMMERMAGE" | "NONE";
            /**
             * @description The gear slot that this armor occupies
             * @enum {string}
             */
            slot: "HEAD" | "NECK" | "TORSO" | "BACK" | "HANDS" | "SHIELD" | "LEGS" | "FEET";
            name: string;
        };
        ArmorEntity: {
            /**
             * @description The faction/player class this belongs to
             * @enum {string}
             */
            faction: "CRYOKNIGHT" | "GUARDIAN" | "HAMMERMAGE" | "NONE";
            /**
             * @description The gear slot that this armor occupies
             * @enum {string}
             */
            slot: "HEAD" | "NECK" | "TORSO" | "BACK" | "HANDS" | "SHIELD" | "LEGS" | "FEET";
            id: number;
            name: string;
            variants: components["schemas"]["ArmorVariantBaseEntity"][];
        };
        UpdateArmorDto: {
            /**
             * @description The faction/player class this belongs to
             * @enum {string}
             */
            faction?: "CRYOKNIGHT" | "GUARDIAN" | "HAMMERMAGE" | "NONE";
            /**
             * @description The gear slot that this armor occupies
             * @enum {string}
             */
            slot?: "HEAD" | "NECK" | "TORSO" | "BACK" | "HANDS" | "SHIELD" | "LEGS" | "FEET";
            name?: string;
        };
        CreateMiscItemDto: {
            name: string;
        };
        MiscItemEntity: {
            id: number;
            name: string;
            vendors: components["schemas"]["VendorBaseEntity"][];
            inRecipes: components["schemas"]["CraftingRecipeBaseEntity"][];
            dropTables: components["schemas"]["DropTableBaseEntity"][];
        };
        UpdateMiscItemDto: {
            name?: string;
        };
        CreateDropTableDto: {
            monsterVariantId: number;
            resourceVariantIds?: number[];
            weaponVariantIds?: number[];
            armorVariantIds?: number[];
            consumableVariantIds?: number[];
            miscItemIds?: number[];
            currency?: number | null;
        };
        DropTableEntity: {
            id: number;
            monsterVariant: components["schemas"]["MonsterVariantBaseWithMonsterEntity"];
            monsterVariantId: number;
            resourceVariants: components["schemas"]["ResourceVariantBaseEntity"][];
            weaponVariants: components["schemas"]["WeaponVariantBaseEntity"][];
            armorVariants: components["schemas"]["ArmorVariantBaseEntity"][];
            consumableVariants: components["schemas"]["ConsumableVariantBaseEntity"][];
            miscItems: components["schemas"]["MiscItemBaseEntity"][];
            currency: number | null;
        };
        UpdateDropTableDto: {
            monsterVariantId?: number;
            resourceVariantIds?: number[];
            weaponVariantIds?: number[];
            armorVariantIds?: number[];
            consumableVariantIds?: number[];
            miscItemIds?: number[];
            currency?: number | null;
            removeResourceVariantIds?: number[];
            removeWeaponVariantIds?: number[];
            removeArmorVariantIds?: number[];
            removeConsumableVariantIds?: number[];
            removeMiscItemIds?: number[];
        };
        CreateMonsterVariantDto: {
            name: string;
            monsterId: number;
        };
        MonsterVariantBaseEntity: {
            id: number;
            name: string;
            monsterId: number;
        };
        MonsterBaseWithSkillEntity: {
            /**
             * @description The damage element this weapon has
             * @enum {string}
             */
            attackElement: "ARBORAE" | "CRYONAE" | "INFERNAE" | "NECROMAE" | "TEMPESTAE" | "IMPACT" | "NONE";
            /**
             * @description The damage element this weapon has
             * @enum {string}
             */
            immuneElement: "ARBORAE" | "CRYONAE" | "INFERNAE" | "NECROMAE" | "TEMPESTAE" | "IMPACT" | "NONE";
            /**
             * @description The damage element this weapon has
             * @enum {string}
             */
            vulnerableElement: "ARBORAE" | "CRYONAE" | "INFERNAE" | "NECROMAE" | "TEMPESTAE" | "IMPACT" | "NONE";
            id: number;
            name: string;
            skillId: number;
            skill: components["schemas"]["CombatSkillBaseEntity"];
            regionId: number;
            passive: boolean;
        };
        MonsterVariantEntity: {
            id: number;
            name: string;
            monster: components["schemas"]["MonsterBaseWithSkillEntity"];
            monsterId: number;
            requirement?: components["schemas"]["CombatSkillRequirementBaseEntity"];
            dropTable?: components["schemas"]["DropTableBaseEntity"];
        };
        UpdateMonsterVariantDto: {
            name?: string;
            monsterId?: number;
        };
        CreateMonsterDto: {
            /**
             * @description The damage type this monster attacks with
             * @enum {string}
             */
            attackElement: "ARBORAE" | "CRYONAE" | "INFERNAE" | "NECROMAE" | "TEMPESTAE" | "IMPACT" | "NONE";
            /**
             * @description The damage type this monster is immune to
             * @enum {string}
             */
            immuneElement: "ARBORAE" | "CRYONAE" | "INFERNAE" | "NECROMAE" | "TEMPESTAE" | "IMPACT" | "NONE";
            /**
             * @description The damage type this monster is vulnerable to
             * @enum {string}
             */
            vulnerableElement: "ARBORAE" | "CRYONAE" | "INFERNAE" | "NECROMAE" | "TEMPESTAE" | "IMPACT" | "NONE";
            name: string;
            skillId: number;
            regionId: number;
            passive: boolean;
        };
        MonsterEntity: {
            /**
             * @description The damage element this weapon has
             * @enum {string}
             */
            attackElement: "ARBORAE" | "CRYONAE" | "INFERNAE" | "NECROMAE" | "TEMPESTAE" | "IMPACT" | "NONE";
            /**
             * @description The damage element this weapon has
             * @enum {string}
             */
            immuneElement: "ARBORAE" | "CRYONAE" | "INFERNAE" | "NECROMAE" | "TEMPESTAE" | "IMPACT" | "NONE";
            /**
             * @description The damage element this weapon has
             * @enum {string}
             */
            vulnerableElement: "ARBORAE" | "CRYONAE" | "INFERNAE" | "NECROMAE" | "TEMPESTAE" | "IMPACT" | "NONE";
            id: number;
            name: string;
            skill: components["schemas"]["CombatSkillBaseEntity"];
            skillId: number;
            region: components["schemas"]["RegionBaseEntity"];
            regionId: number;
            rooms: components["schemas"]["RoomBaseEntity"][];
            passive: boolean;
            variants: components["schemas"]["MonsterVariantBaseEntity"][];
        };
        UpdateMonsterDto: {
            /**
             * @description The damage type this monster attacks with
             * @enum {string}
             */
            attackElement?: "ARBORAE" | "CRYONAE" | "INFERNAE" | "NECROMAE" | "TEMPESTAE" | "IMPACT" | "NONE";
            /**
             * @description The damage type this monster is immune to
             * @enum {string}
             */
            immuneElement?: "ARBORAE" | "CRYONAE" | "INFERNAE" | "NECROMAE" | "TEMPESTAE" | "IMPACT" | "NONE";
            /**
             * @description The damage type this monster is vulnerable to
             * @enum {string}
             */
            vulnerableElement?: "ARBORAE" | "CRYONAE" | "INFERNAE" | "NECROMAE" | "TEMPESTAE" | "IMPACT" | "NONE";
            name?: string;
            skillId?: number;
            regionId?: number;
            passive?: boolean;
        };
        CreateVendorDto: {
            name?: string | null;
            npcId: number;
            resourceVariantIds?: number[];
            weaponVariantIds?: number[];
            armorVariantIds?: number[];
            consumableVariantIds?: number[];
            miscItemIds?: number[];
        };
        VendorEntity: {
            id: number;
            name?: string | null;
            npc: components["schemas"]["NpcBaseEntity"];
            npcId: number;
            resourceVariants: components["schemas"]["ResourceVariantBaseEntity"][];
            consumableVariants: components["schemas"]["ConsumableVariantBaseEntity"][];
            weaponVariants: components["schemas"]["WeaponVariantBaseEntity"][];
            armorVariants: components["schemas"]["ArmorVariantBaseEntity"][];
            miscItems: components["schemas"]["MiscItemBaseEntity"][];
        };
        UpdateVendorDto: {
            name?: string | null;
            npcId?: number;
            resourceVariantIds?: number[];
            weaponVariantIds?: number[];
            armorVariantIds?: number[];
            consumableVariantIds?: number[];
            miscItemIds?: number[];
            removeResourceVariantIds?: number[];
            removeWeaponVariantIds?: number[];
            removeArmorVariantIds?: number[];
            removeConsumableVariantIds?: number[];
            removeMiscItemIds?: number[];
        };
        CreateNpcDto: {
            name: string;
        };
        NpcEntity: {
            id: number;
            name: string;
            vendor?: components["schemas"]["VendorBaseEntity"];
            questSteps: components["schemas"]["QuestStepBaseEntity"][];
            rooms: components["schemas"]["RoomBaseEntity"][];
        };
        UpdateNpcDto: {
            name?: string;
        };
        CreateQuestStepDto: {
            index: number;
            description: string;
            questId: number;
            roomId?: number | null;
            npcId?: number | null;
        };
        QuestStepEntity: {
            id: number;
            index: number;
            description: string;
            quest: components["schemas"]["QuestBaseEntity"];
            questId: number;
            room?: components["schemas"]["RoomBaseEntity"];
            roomId: number | null;
            npc?: components["schemas"]["NpcBaseEntity"];
            npcId: number | null;
        };
        UpdateQuestStepDto: {
            index?: number;
            description?: string;
            questId?: number;
            roomId?: number | null;
            npcId?: number | null;
        };
        CreateQuestDto: {
            name: string;
            regionId: number;
        };
        QuestEntity: {
            id: number;
            name: string;
            region: components["schemas"]["RegionBaseEntity"];
            regionId: number;
            steps: components["schemas"]["QuestStepBaseEntity"][];
        };
        UpdateQuestDto: {
            name?: string;
            regionId?: number;
        };
        StatsEntity: {
            counts: {
                regions: number;
                rooms: number;
                combatSkills: number;
                combatSkillRequirements: number;
                gatheringSkills: number;
                gatheringSkillRequirements: number;
                craftingSkills: number;
                craftingSkillRequirements: number;
                craftingRecipes: number;
                resources: number;
                resourceVariants: number;
                consumables: number;
                consumableVariants: number;
                weapons: number;
                weaponVariants: number;
                armors: number;
                armorVariants: number;
                miscItems: number;
                monsters: number;
                monsterVariants: number;
                npcs: number;
                vendors: number;
                quests: number;
                questSteps: number;
            };
            unset: {
                combatSkillRequirements: number;
                gatheringSkillRequirements: number;
                craftingSkillRequirements: number;
                craftingRecipes: number;
                resourceVariants: number;
                consumableVariants: number;
                weaponVariants: number;
                armorVariants: number;
                monsterVariants: number;
                dropTables: number;
                npcs: number;
                vendors: number;
                quests: number;
                questSteps: number;
            };
        };
        AttackElementsEnum: {
            /** @enum {string} */
            value: "ARBORAE" | "CRYONAE" | "INFERNAE" | "NECROMAE" | "TEMPESTAE" | "IMPACT" | "NONE";
        };
        FactionsEnum: {
            /** @enum {string} */
            value: "CRYOKNIGHT" | "GUARDIAN" | "HAMMERMAGE" | "NONE";
        };
        GearSlotsEnum: {
            /** @enum {string} */
            value: "HEAD" | "NECK" | "TORSO" | "BACK" | "HANDS" | "SHIELD" | "LEGS" | "FEET";
        };
        BankTypesEnum: {
            /** @enum {string} */
            value: "BONES" | "BUILDING" | "CAPES" | "EXPLOSIVES" | "BAIT" | "HIDES" | "INGREDIENTS" | "LEATHERS" | "LUMBER" | "MONUMENT" | "ORE" | "REAGENTS" | "POTIONS" | "QUARTERMASTER" | "STONE" | "TIMBER";
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AuthController_signIn: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignInDto"];
            };
        };
        responses: {
            /** @description Valid login credentials */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JwtEntity"];
                };
            };
            /** @description Invalid login credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RegionsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all region records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegionEntity"][];
                };
            };
        };
    };
    RegionsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRegionDto"];
            };
        };
        responses: {
            /** @description Region created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegionBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RegionsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found region record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegionEntity"];
                };
            };
            /** @description Region not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RegionsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Region was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegionBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Region not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RegionsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRegionDto"];
            };
        };
        responses: {
            /** @description Updated region record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegionBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Region not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all room records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomEntity"][];
                };
            };
        };
    };
    RoomsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRoomDto"];
            };
        };
        responses: {
            /** @description Room created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found room record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomEntity"];
                };
            };
            /** @description Room not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Room was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Room not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoomsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRoomDto"];
            };
        };
        responses: {
            /** @description Updated room record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Room not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GatheringSkillRequirementsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all gatheringSkillRequirement records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GatheringSkillRequirementEntity"][];
                };
            };
        };
    };
    GatheringSkillRequirementsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateGatheringSkillRequirementDto"];
            };
        };
        responses: {
            /** @description GatheringSkillRequirement created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GatheringSkillRequirementBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GatheringSkillRequirementsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found gatheringSkillRequirement record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GatheringSkillRequirementEntity"];
                };
            };
            /** @description GatheringSkillRequirement not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GatheringSkillRequirementsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description GatheringSkillRequirement was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GatheringSkillRequirementBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description GatheringSkillRequirement not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GatheringSkillRequirementsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateGatheringSkillRequirementDto"];
            };
        };
        responses: {
            /** @description Updated gatheringSkillRequirement record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GatheringSkillRequirementBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description GatheringSkillRequirement not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GatheringSkillsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all gatheringSkill records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GatheringSkillEntity"][];
                };
            };
        };
    };
    GatheringSkillsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateGatheringSkillDto"];
            };
        };
        responses: {
            /** @description GatheringSkill created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GatheringSkillBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GatheringSkillsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found gatheringSkill record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GatheringSkillEntity"];
                };
            };
            /** @description GatheringSkill not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GatheringSkillsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description GatheringSkill was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GatheringSkillBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description GatheringSkill not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GatheringSkillsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateGatheringSkillDto"];
            };
        };
        responses: {
            /** @description Updated gatheringSkill record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GatheringSkillBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description GatheringSkill not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CraftingSkillRequirementsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all craftingSkillRequirement records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CraftingSkillRequirementEntity"][];
                };
            };
        };
    };
    CraftingSkillRequirementsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCraftingSkillRequirementDto"];
            };
        };
        responses: {
            /** @description CraftingSkillRequirement created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CraftingSkillRequirementBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CraftingSkillRequirementsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found craftingSkillRequirement record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CraftingSkillRequirementEntity"];
                };
            };
            /** @description CraftingSkillRequirement not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CraftingSkillRequirementsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description CraftingSkillRequirement was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CraftingSkillRequirementBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description CraftingSkillRequirement not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CraftingSkillRequirementsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCraftingSkillRequirementDto"];
            };
        };
        responses: {
            /** @description Updated craftingSkillRequirement record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CraftingSkillRequirementBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description CraftingSkillRequirement not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CraftingRecipesController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all craftingRecipe records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CraftingRecipeEntity"][];
                };
            };
        };
    };
    CraftingRecipesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCraftingRecipeDto"];
            };
        };
        responses: {
            /** @description CraftingRecipe created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CraftingRecipeBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CraftingRecipesController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found craftingRecipe record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CraftingRecipeEntity"];
                };
            };
            /** @description CraftingRecipe not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CraftingRecipesController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description CraftingRecipe was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CraftingRecipeBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description CraftingRecipe not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CraftingRecipesController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCraftingRecipeDto"];
            };
        };
        responses: {
            /** @description Updated craftingRecipe record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CraftingRecipeBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description CraftingRecipe not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CraftingSkillsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all craftingSkill records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CraftingSkillEntity"][];
                };
            };
        };
    };
    CraftingSkillsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCraftingSkillDto"];
            };
        };
        responses: {
            /** @description CraftingSkill created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CraftingSkillBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CraftingSkillsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found craftingSkill record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CraftingSkillEntity"];
                };
            };
            /** @description CraftingSkill not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CraftingSkillsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description CraftingSkill was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CraftingSkillBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description CraftingSkill not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CraftingSkillsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCraftingSkillDto"];
            };
        };
        responses: {
            /** @description Updated craftingSkill record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CraftingSkillBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description CraftingSkill not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CombatSkillRequirementsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all combatSkillRequirement records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CombatSkillRequirementEntity"][];
                };
            };
        };
    };
    CombatSkillRequirementsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCombatSkillRequirementDto"];
            };
        };
        responses: {
            /** @description CombatSkillRequirement created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CombatSkillRequirementBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CombatSkillRequirementsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found combatSkillRequirement record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CombatSkillRequirementEntity"];
                };
            };
            /** @description CombatSkillRequirement not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CombatSkillRequirementsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description CombatSkillRequirement was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CombatSkillRequirementBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description CombatSkillRequirement not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CombatSkillRequirementsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCombatSkillRequirementDto"];
            };
        };
        responses: {
            /** @description Updated combatSkillRequirement record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CombatSkillRequirementBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description CombatSkillRequirement not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CombatSkillsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all combatSkill records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CombatSkillEntity"][];
                };
            };
        };
    };
    CombatSkillsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCombatSkillDto"];
            };
        };
        responses: {
            /** @description CombatSkill created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CombatSkillBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CombatSkillsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found combatSkill record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CombatSkillEntity"];
                };
            };
            /** @description CombatSkill not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CombatSkillsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description CombatSkill was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CombatSkillBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description CombatSkill not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CombatSkillsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCombatSkillDto"];
            };
        };
        responses: {
            /** @description Updated combatSkill record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CombatSkillBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description CombatSkill not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SkillsController_find: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Cannot directly query skills warning */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ItemsController_find: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Cannot directly query items warning */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ResourceVariantsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all resourceVariant records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceVariantEntity"][];
                };
            };
        };
    };
    ResourceVariantsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateResourceVariantDto"];
            };
        };
        responses: {
            /** @description ResourceVariant created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceVariantBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ResourceVariantsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found resourceVariant record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceVariantEntity"];
                };
            };
            /** @description ResourceVariant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ResourceVariantsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ResourceVariant was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceVariantBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description ResourceVariant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ResourceVariantsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateResourceVariantDto"];
            };
        };
        responses: {
            /** @description Updated resourceVariant record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceVariantBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description ResourceVariant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ResourcesController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all resource records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceEntity"][];
                };
            };
        };
    };
    ResourcesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateResourceDto"];
            };
        };
        responses: {
            /** @description Resource created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ResourcesController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found resource record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceEntity"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ResourcesController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Resource was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ResourcesController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateResourceDto"];
            };
        };
        responses: {
            /** @description Updated resource record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ConsumableVariantsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all consumableVariant records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConsumableVariantEntity"][];
                };
            };
        };
    };
    ConsumableVariantsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateConsumableVariantDto"];
            };
        };
        responses: {
            /** @description ConsumableVariant created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConsumableVariantBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ConsumableVariantsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found consumableVariant record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConsumableVariantEntity"];
                };
            };
            /** @description ConsumableVariant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ConsumableVariantsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ConsumableVariant was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConsumableVariantBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description ConsumableVariant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ConsumableVariantsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateConsumableVariantDto"];
            };
        };
        responses: {
            /** @description Updated consumableVariant record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConsumableVariantBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description ConsumableVariant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ConsumablesController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all consumable records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConsumableEntity"][];
                };
            };
        };
    };
    ConsumablesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateConsumableDto"];
            };
        };
        responses: {
            /** @description Consumable created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConsumableBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ConsumablesController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found consumable record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConsumableEntity"];
                };
            };
            /** @description Consumable not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ConsumablesController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Consumable was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConsumableBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Consumable not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ConsumablesController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateConsumableDto"];
            };
        };
        responses: {
            /** @description Updated consumable record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConsumableBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Consumable not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    WeaponVariantsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all weaponVariant records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WeaponVariantEntity"][];
                };
            };
        };
    };
    WeaponVariantsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateWeaponVariantDto"];
            };
        };
        responses: {
            /** @description WeaponVariant created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WeaponVariantBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    WeaponVariantsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found weaponVariant record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WeaponVariantEntity"];
                };
            };
            /** @description WeaponVariant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    WeaponVariantsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description WeaponVariant was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WeaponVariantBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description WeaponVariant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    WeaponVariantsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateWeaponVariantDto"];
            };
        };
        responses: {
            /** @description Updated weaponVariant record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WeaponVariantBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description WeaponVariant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    WeaponsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all weapon records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WeaponEntity"][];
                };
            };
        };
    };
    WeaponsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateWeaponDto"];
            };
        };
        responses: {
            /** @description Weapon created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WeaponBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    WeaponsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found weapon record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WeaponEntity"];
                };
            };
            /** @description Weapon not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    WeaponsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Weapon was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WeaponBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Weapon not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    WeaponsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateWeaponDto"];
            };
        };
        responses: {
            /** @description Updated weapon record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WeaponBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Weapon not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ArmorVariantsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all armorVariant records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArmorVariantEntity"][];
                };
            };
        };
    };
    ArmorVariantsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateArmorVariantDto"];
            };
        };
        responses: {
            /** @description ArmorVariant created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArmorVariantBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ArmorVariantsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found armorVariant record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArmorVariantEntity"];
                };
            };
            /** @description ArmorVariant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ArmorVariantsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ArmorVariant was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArmorVariantBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description ArmorVariant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ArmorVariantsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateArmorVariantDto"];
            };
        };
        responses: {
            /** @description Updated armorVariant record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArmorVariantBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description ArmorVariant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ArmorsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all armor records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArmorEntity"][];
                };
            };
        };
    };
    ArmorsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateArmorDto"];
            };
        };
        responses: {
            /** @description Armor created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArmorBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ArmorsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found armor record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArmorEntity"];
                };
            };
            /** @description Armor not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ArmorsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Armor was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArmorBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Armor not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ArmorsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateArmorDto"];
            };
        };
        responses: {
            /** @description Updated armor record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArmorBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Armor not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MiscItemsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all miscItem records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MiscItemEntity"][];
                };
            };
        };
    };
    MiscItemsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMiscItemDto"];
            };
        };
        responses: {
            /** @description MiscItem created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MiscItemBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MiscItemsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found miscItem record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MiscItemEntity"];
                };
            };
            /** @description MiscItem not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MiscItemsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description MiscItem was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MiscItemBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description MiscItem not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MiscItemsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMiscItemDto"];
            };
        };
        responses: {
            /** @description Updated miscItem record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MiscItemBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description MiscItem not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DropTablesController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all dropTable records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DropTableEntity"][];
                };
            };
        };
    };
    DropTablesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDropTableDto"];
            };
        };
        responses: {
            /** @description DropTable created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DropTableBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DropTablesController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found dropTable record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DropTableEntity"];
                };
            };
            /** @description DropTable not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DropTablesController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description DropTable was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DropTableBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description DropTable not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DropTablesController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateDropTableDto"];
            };
        };
        responses: {
            /** @description Updated dropTable record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DropTableBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description DropTable not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MonsterVariantsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all monsterVariant records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MonsterVariantEntity"][];
                };
            };
        };
    };
    MonsterVariantsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMonsterVariantDto"];
            };
        };
        responses: {
            /** @description MonsterVariant created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MonsterVariantBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MonsterVariantsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found monsterVariant record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MonsterVariantEntity"];
                };
            };
            /** @description MonsterVariant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MonsterVariantsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description MonsterVariant was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MonsterVariantBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description MonsterVariant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MonsterVariantsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMonsterVariantDto"];
            };
        };
        responses: {
            /** @description Updated monsterVariant record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MonsterVariantBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description MonsterVariant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MonstersController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all monster records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MonsterEntity"][];
                };
            };
        };
    };
    MonstersController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMonsterDto"];
            };
        };
        responses: {
            /** @description Monster created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MonsterBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MonstersController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found monster record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MonsterEntity"];
                };
            };
            /** @description Monster not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MonstersController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Monster was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MonsterBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Monster not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MonstersController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMonsterDto"];
            };
        };
        responses: {
            /** @description Updated monster record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MonsterBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Monster not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    VendorsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all vendor records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VendorEntity"][];
                };
            };
        };
    };
    VendorsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateVendorDto"];
            };
        };
        responses: {
            /** @description Vendor created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VendorBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    VendorsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found vendor record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VendorEntity"];
                };
            };
            /** @description Vendor not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    VendorsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Vendor was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VendorBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Vendor not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    VendorsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateVendorDto"];
            };
        };
        responses: {
            /** @description Updated vendor record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VendorBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Vendor not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NpcsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all npc records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NpcEntity"][];
                };
            };
        };
    };
    NpcsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateNpcDto"];
            };
        };
        responses: {
            /** @description Npc created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NpcBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NpcsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found npc record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NpcEntity"];
                };
            };
            /** @description Npc not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NpcsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Npc was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NpcBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Npc not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NpcsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateNpcDto"];
            };
        };
        responses: {
            /** @description Updated npc record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NpcBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Npc not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    QuestStepsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all questStep records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestStepEntity"][];
                };
            };
        };
    };
    QuestStepsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateQuestStepDto"];
            };
        };
        responses: {
            /** @description QuestStep created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestStepBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    QuestStepsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found questStep record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestStepEntity"];
                };
            };
            /** @description QuestStep not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    QuestStepsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description QuestStep was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestStepBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description QuestStep not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    QuestStepsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateQuestStepDto"];
            };
        };
        responses: {
            /** @description Updated questStep record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestStepBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description QuestStep not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    QuestsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found all quest records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestEntity"][];
                };
            };
        };
    };
    QuestsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateQuestDto"];
            };
        };
        responses: {
            /** @description Quest created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    QuestsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found quest record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestEntity"];
                };
            };
            /** @description Quest not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    QuestsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Quest was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestBaseEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Quest not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    QuestsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateQuestDto"];
            };
        };
        responses: {
            /** @description Updated quest record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestBaseEntity"];
                };
            };
            /** @description Bad request, invalid body data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Quest not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StatsController_find: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found stats */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatsEntity"];
                };
            };
        };
    };
    HealthController_check: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Health Check is successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example ok */
                        status?: string;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       }
                         *     } */
                        info?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {} */
                        error?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       }
                         *     } */
                        details?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        };
                    };
                };
            };
            /** @description The Health Check is not successful */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example error */
                        status?: string;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       }
                         *     } */
                        info?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {
                         *       "redis": {
                         *         "status": "down",
                         *         "message": "Could not connect"
                         *       }
                         *     } */
                        error?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       },
                         *       "redis": {
                         *         "status": "down",
                         *         "message": "Could not connect"
                         *       }
                         *     } */
                        details?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        };
                    };
                };
            };
        };
    };
    LogsController_getCombinedLogs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
